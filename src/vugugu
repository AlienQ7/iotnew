Here is file 1, V 0.0.01 of authStyle.js 

// authStyles.js V0.0.01 - register fix attempt

import { COLORS } from './constants.js';

// *** CRITICAL FIX: ADD 'export const' so index.js can import STYLE_STRING ***
export const STYLE_STRING = `
/* --- 1. KEYFRAME ANIMATION FOR GLOW --- */
@keyframes pulseGlow {
    from {
        box-shadow: 0 0 5px ${COLORS.ACCENT}, 0 0 10px ${COLORS.ACCENT};
    }
    to {
        box-shadow: 0 0 15px ${COLORS.ACCENT}80, 0 0 20px ${COLORS.ACCENT}30;
    }
}

/* --- 2. GLOBAL & UTILITY STYLES --- */
body {
    background-color: ${COLORS.BG};
    color: ${COLORS.FG};
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    margin: 0;
    padding: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

/* --- 3. MAIN CARD LAYOUT --- */
.auth-container {
    background-color: ${COLORS.BG}; /* Using the same BG for deep contrast */
    padding: 30px;
    border-radius: 8px;
    border: 1px solid ${COLORS.ACCENT_LOW}; /* Subtle border */
    width: 90%; /* Responsive width for mobile */
    max-width: 400px; /* Max width for desktop/laptop */
    
    /* Neon Glow Effect on the Card Border */
    box-shadow: 0 0 10px ${COLORS.ACCENT}AA, 0 0 20px ${COLORS.ACCENT}55;
    transition: box-shadow 0.3s ease;
}

h2 {
    color: ${COLORS.SUCCESS}; /* Green header, like your image */
    text-align: center;
    margin-bottom: 25px;
    font-size: 1.8em;
    text-transform: uppercase;
}

/* --- CRITICAL FIX: Ensure signup view is hidden by default --- */
#signup-view {
    display: none !important; 
}

/* --- 4. FORM ELEMENTS --- */
.input-group {
    margin-bottom: 20px;
}

input[type="email"],
input[type="password"] {
    width: 100%;
    padding: 12px;
    background-color: ${COLORS.BORDER}; /* Dark grey background */
    border: 1px solid ${COLORS.AMBER_ORANGE}30; /* Light orange border */
    color: ${COLORS.FG};
    border-radius: 4px;
    box-sizing: border-box; /* Include padding in width */
    transition: border-color 0.3s ease;
}

input[type="email"]:focus,
input[type="password"]:focus {
    border-color: ${COLORS.AMBER_ORANGE}; /* Brighten border on focus */
    outline: none;
    box-shadow: 0 0 5px ${COLORS.AMBER_ORANGE}; /* Subtle glow on focus */
}

/* Placeholder styling */
::placeholder {
    color: ${COLORS.ACCENT}80; /* Faded orange placeholder */
}

/* --- 5. BUTTON STYLES (Primary Login/Signup) --- */
.auth-button {
    width: 100%;
    padding: 15px;
    margin-top: 15px;
    background-color: ${COLORS.DARK_BURN}; /* Dark Orange Background */
    color: ${COLORS.FG};
    border: none;
    border-radius: 4px;
    font-size: 1.1em;
    font-weight: bold;
    cursor: pointer;
    text-transform: uppercase;
    
    /* Initial Glow */
    box-shadow: 0 0 5px ${COLORS.ACCENT};
    
    transition: background-color 0.2s, box-shadow 0.2s, transform 0.1s;
}

.auth-button:hover {
    background-color: ${COLORS.ACCENT}; /* Brighten background on hover */
    box-shadow: 0 0 15px ${COLORS.ACCENT}, 0 0 25px ${COLORS.ACCENT}60;
}

/* ** CRITICAL RESPONSIVENESS/INTERACTIVITY: Instant Feedback ** */
.auth-button:active {
    /* Instantly changes on press */
    transform: scale(0.98); 
    box-shadow: 0 0 2px ${COLORS.ACCENT}; 
}

/* --- 6. FOOTER/REGISTER LINK --- */
.auth-footer {
    text-align: center;
    margin-top: 25px;
    font-size: 0.9em;
}

.auth-footer a {
    color: ${COLORS.AMBER_ORANGE}; /* Orange link color */
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.auth-footer a:hover {
    color: ${COLORS.FG};
}

/* --- 7. MESSAGE BOX (Error/Success) --- */
.message {
    text-align: center;
    padding: 10px;
    margin-bottom: 15px;
    border-radius: 4px;
    font-weight: bold;
    display: none; /* Hidden by default */
}

.message.error {
    background-color: ${COLORS.DANGER}30;
    border: 1px solid ${COLORS.DANGER};
    color: ${COLORS.DANGER};
}

.message.success {
    background-color: ${COLORS.SUCCESS}30;
    border: 1px solid ${COLORS.SUCCESS};
    color: ${COLORS.SUCCESS};
}

/* --- 8. MEDIA QUERIES (Simple Responsiveness) --- */
@media (max-width: 600px) {
    .auth-container {
        padding: 25px;
        /* Use vertical viewport height on small screens for better centering */
        min-height: 100vh;
        width: 100%;
        max-width: none;
        border-radius: 0;
        box-shadow: none; /* Remove fancy glow on full-screen mobile */
    }
}
`;

/**
 * Function to dynamically inject the CSS string into the document head.
 */
export function injectStyles() {
    const styleElement = document.createElement('style');
    styleElement.textContent = STYLE_STRING;
    document.head.appendChild(styleElement);
}

File 2 , auth.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>IoT Scheduler - Login / Register</title>
</head>
<body>
    <div class="auth-container">
        
        <div id="message-box" class="message" style="display: none;"></div>

        <div id="login-view">
            <h2>Login</h2>
            <form id="login-form">
                <div class="input-group">
                    <input type="email" id="login-email" placeholder="Email Address" required>
                </div>
                <div class="input-group">
                    <input type="password" id="login-password" placeholder="Password (Access Key)" required>
                </div>
                <button type="submit" class="auth-button">Login</button>
            </form>
            <div class="auth-footer">
                Don't have an account? <a href="#" id="show-signup">Register</a>
                <br><br>
                <a href="#" id="forgot-password">Forgot Password?</a>
            </div>
        </div>

        <div id="signup-view">
            <h2>Register</h2>
            <form id="signup-form">
                <div class="input-group">
                    <input type="email" id="signup-email" placeholder="Email Address" required>
                </div>
                <div class="input-group">
                    <input type="password" id="signup-password" placeholder="Password (8+ chars, A-Z, !@#)" required>
                </div>
                <button type="submit" class="auth-button">Sign Up</button>
            </form>
            <div class="auth-footer">
                Already have an account? <a href="#" id="show-login">Login</a>
            </div>
        </div>
        
    </div>
    
    <script type="module" src="./authClient.js"></script>
</body>
</html>



File 3, authClient.js 

// V 0.0.04 - FINAL CONTROL FIX
// authClient.js - FINAL AND INDISPUTABLE SERVER-SAFE WRAPPER
const BACKEND_URL = "";
const TOKEN_KEY = "auth_token";

// CRITICAL: ALL code is wrapped in an immediately-invoked function expression (IIFE).
(function() {
    
    // =================================================================
    // 1. DYNAMIC ELEMENT ACCESS (The Definitive Server Gate Fix)
    // =================================================================
    let elements = null;

    // This function now includes a protective check: if running on the server, it quits immediately.
    function getDOMElements() {
        
        // --- THE CRITICAL SERVER GATE ---
        if (typeof document === 'undefined') {
            return {}; 
        }
        // --------------------------------------
        
        if (!elements) {
            elements = {
                loginView: document.getElementById('login-view'),
                signupView: document.getElementById('signup-view'),
                loginForm: document.getElementById('login-form'),
                signupForm: document.getElementById('signup-form'),
                messageBox: document.getElementById('message-box'),
                loginEmail: document.getElementById('login-email'),
                loginPassword: document.getElementById('login-password'),
                signupEmail: document.getElementById('signup-email'),
                signupPassword: document.getElementById('signup-password'),
                showSignup: document.getElementById('show-signup'),
                showLogin: document.getElementById('show-login'),
                forgotPassword: document.getElementById('forgot-password'),
            };
        }
        return elements;
    }


    // Function to immediately check if the user is already logged in
    function checkAuthStatus() {
        if (typeof localStorage !== 'undefined' && localStorage.getItem(TOKEN_KEY)) {
            console.log("User already logged in. Redirecting to dashboard...");
        }
    }


    // =================================================================
    // 2. UI MANIPULATION AND MESSAGE HANDLING
    // =================================================================

    function showMessage(type, text) {
        const { messageBox } = getDOMElements();
        if (messageBox) { 
            messageBox.textContent = text;
            messageBox.className = `message ${type}`;
            messageBox.style.display = 'block';
            
            setTimeout(() => {
                messageBox.style.display = 'none';
            }, 5000);
        }
    }

    function switchView(view) {
        const { messageBox, loginView, signupView, loginForm, signupForm } = getDOMElements();
        // Check if essential views exist before attempting manipulation
        if (loginView && signupView) {
            if (messageBox) messageBox.style.display = 'none'; 
            if (view === 'login') {
                loginView.style.display = 'block';
                signupView.style.display = 'none';
                if (loginForm) loginForm.reset();
            } else {
                loginView.style.display = 'none';
                signupView.style.display = 'block';
                if (signupForm) signupForm.reset();
            }
        }
    }


    // =================================================================
    // 3. API CALL HANDLERS (No Change)
    // =================================================================

    async function handleLogin(e) {
        e.preventDefault();
        const { loginForm, loginEmail, loginPassword } = getDOMElements();
        
        const email = loginEmail ? loginEmail.value : '';
        const password = loginPassword ? loginPassword.value : '';
        
        const button = loginForm.querySelector('.auth-button');
        if (button) {
            button.textContent = 'LOGGING IN...';
            button.disabled = true;
        }

        try {
            const response = await fetch(`${BACKEND_URL}/api/user/login`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            
            if (response.ok && data.success) {
                if (typeof localStorage !== 'undefined') localStorage.setItem(TOKEN_KEY, data.token);
                showMessage('success', 'Login successful! Redirecting...');
                
                setTimeout(() => {
                    console.log("LOGIN SUCCESS: Token stored. Dashboard redirect simulation.");
                }, 1000);
                
            } else {
                showMessage('error', data.message || 'Invalid credentials or login failed.');
            }

        } catch (error) {
            console.error('Network or server error:', error);
            showMessage('error', 'Connection error. Please try again.');
        } finally {
            if (button) {
                button.textContent = 'LOGIN';
                button.disabled = false;
            }
        }
    }

    async function handleSignup(e) {
        e.preventDefault();
        const { signupForm, signupEmail, signupPassword } = getDOMElements();
        
        const email = signupEmail ? signupEmail.value : '';
        const password = signupPassword ? signupPassword.value : '';
        
        const button = signupForm.querySelector('.auth-button');
        if (button) {
            button.textContent = 'REGISTERING...';
            button.disabled = true;
        }

        try {
            const response = await fetch(`${BACKEND_URL}/api/user/signup`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ email, password })
            });

            const data = await response.json();
            
            if (response.ok && data.success) {
                showMessage('success', 'Account created! Please log in below.');
                switchView('login'); 
            } else {
                showMessage('error', data.message || 'Registration failed. Check your password policy.');
            }

        } catch (error) {
            console.error('Network or server error:', error);
            showMessage('error', 'Connection error. Please try again.');
        } finally {
            if (button) {
                button.textContent = 'SIGN UP';
                button.disabled = false;
            }
        }
    }

    // =================================================================
    // 4. ATTACH EVENT LISTENERS (Initial Run)
    // =================================================================
    
    // Initial check (Can run immediately)
    checkAuthStatus();
    
    // Wait for the DOM elements to be ready before attaching listeners
    if (typeof document !== 'undefined') {
        document.addEventListener('DOMContentLoaded', () => {
            const { showSignup, showLogin, forgotPassword, loginForm, signupForm } = getDOMElements();
            
            // Event listeners for view switching
            if (showSignup) showSignup.addEventListener('click', (e) => {
                e.preventDefault();
                switchView('signup');
            });

            if (showLogin) showLogin.addEventListener('click', (e) => {
                e.preventDefault();
                switchView('login');
            });

            if (forgotPassword) forgotPassword.addEventListener('click', (e) => {
                e.preventDefault();
                showMessage('info', "Password reset functionality is currently under development.");
            });
            
            // Form submission listeners
            if (loginForm) loginForm.addEventListener('submit', handleLogin);
            if (signupForm) signupForm.addEventListener('submit', handleSignup);
            
            // --- CRITICAL FIX: Enforce the initial view AFTER all elements and listeners are ready ---
            switchView('login');
        });
    }

})();


File 4 , constants.js
// constants.js

export const BACKEND_URL = "https://iotnew.dev0pscommand.workers.dev";
export const TOKEN_KEY = "iot_auth_token"; // Key for localStorage

// --- Color Constants based on your provided theme ---
export const COLORS = {
    // Primary Background and Text
    BG: '#0A0A0A',
    FG: '#E8EDF0',
    
    // Primary Accent (Orange/Amber)
    ACCENT: '#FF8000',
    ACCENT_LOW: '#362200', 
    AMBER_ORANGE: '#FFBF00', 
    DARK_BURN: '#CC5500', 
    
    // UI Colors
    BORDER: '#1A1A1A',
    SUCCESS: '#00A36C', 
    DANGER: '#CC3333', 
};



Now file 5 ,index.js 

// src/index.js - FINAL AND GUARANTEED UI SOLUTION (String Injection)

// NOTE: This code uses direct file imports, meaning auth.html, authStyles.js, 
// and authClient.js MUST be located in the 'src/' directory.
// It bypasses the unstable Cloudflare [site] asset binding system.

// =================================================================
// IMPORTS
// =================================================================

import { handleSignUp, handleLogin } from './auth';
import { verifyJWT } from './session'; 

// A. CRITICAL: Direct imports for the frontend content
// These imports read the entire file content as a string at build time.
// This requires the frontend files to be moved back into the 'src/' folder.
import AUTH_HTML from './auth.html'; 
import { STYLE_STRING } from './authStyles'; 
import AUTH_CLIENT_JS_CONTENT from './authClient.js'; 

// B. Existing API/Schedule imports remain:
import { handleSetSchedule, handleScheduledTrigger, handleScheduleList, handleScheduleDelete, handleScheduleToggle } from './schedule'; 
import { handleDeviceAdd, handleDeviceList, handleDeviceDelete } from './device'; 


// =================================================================
// JWT Authorization Middleware (No Change)
// =================================================================
async function authorizeRequest(request, env) {
    let token = request.headers.get('Authorization');
    if (token && token.startsWith('Bearer ')) {
        token = token.substring(7);
    } else {
        const cookieHeader = request.headers.get('Cookie');
        if (cookieHeader) {
            const cookies = cookieHeader.split(';').map(c => c.trim());
            const authTokenCookie = cookies.find(c => c.startsWith('auth_token='));
            if (authTokenCookie) {
                token = authTokenCookie.substring('auth_token='.length);
            }
        }
    }
    if (!token) {
        return { response: new Response('Missing Authorization Token.', { status: 401 }) };
    }
    // Assuming JWT_SECRET is available in env
    const decodedPayload = await verifyJWT(token, env.JWT_SECRET); 
    if (!decodedPayload || !decodedPayload.email) {
        return { response: new Response('Invalid or Expired Token. Please log in again.', { status: 401 }) };
    }
    return { user: { email: decodedPayload.email } };
}

// =================================================================
// MAIN WORKER HANDLER
// =================================================================

export default {
  async fetch(request, env, ctx) {
    const url = new URL(request.url);
    const path = url.pathname;
    const method = request.method;

    // -------------------------------------------------------------
    // FRONTEND ROUTING: Serve auth.html on root path
    // -------------------------------------------------------------
    if (path === '/' || path === '/auth.html') {
        
        try {
            // 1. Start with the raw HTML string
            let injectedHtml = AUTH_HTML;
            
            // 2. Inject Styles (STYLE_STRING is imported from authStyles.js)
            const styleTag = `<style>${STYLE_STRING}</style>`;
            injectedHtml = injectedHtml.replace('</head>', `${styleTag}</head>`);
            
            // 3. Remove the external script link and inject the raw script content
            // This replacement is CRITICAL to avoid the browser trying to fetch the file twice.
            injectedHtml = injectedHtml.replace('<script type="module" src="./authClient.js"></script>', '');
            
            const finalScriptTag = `<script type="text/javascript">${AUTH_CLIENT_JS_CONTENT}</script>`;
            injectedHtml = injectedHtml.replace('</body>', `${finalScriptTag}</body>`);

            return new Response(injectedHtml, {
                status: 200,
                headers: { 'Content-Type': 'text/html' }
            });
            
        } catch (error) {
            // If the imports themselves fail (highly unlikely now), this is the fallback.
            return new Response(`UI Injection Error: ${error.message}`, { status: 500 });
        }
    }

    // API ROUTING
    if (path.startsWith('/api/user/')) {
      return handleUserApi(path, method, request, env);
    } else if (path.startsWith('/api/device/') || path.startsWith('/api/schedule/')) {
      return handleProtectedApi(path, method, request, env);
    }
    
    // Fallback 404 for non-API, non-root paths
    return new Response('API Route Not Found.', { status: 404 });
  },
  
  // -------------------------------------------------------------
  // SCHEDULED HANDLER (No Change)
  // -------------------------------------------------------------
  async scheduled(event, env, ctx) {
    console.log("Cron worker has been triggered.");
    ctx.waitUntil(handleScheduledTrigger(event, env, ctx)); 
  }
};

// =================================================================
// API ROUTERS (No Change)
// =================================================================
async function handleUserApi(path, method, request, env) {
  switch (path) {
    case '/api/user/signup':
      if (method === 'POST') {
        return handleSignUp(request, env); 
      }
      break;
    case '/api/user/login':
      if (method === 'POST') {
        return handleLogin(request, env); 
      }
      break; 
    default:
      return new Response('User API Not Found', { status: 404 });
  }
  return new Response('Method Not Allowed', { status: 405 });
}

async function handleProtectedApi(path, method, request, env) {
    const authResult = await authorizeRequest(request, env);
    if (authResult.response) {
        return authResult.response; 
    }
    const userEmail = authResult.user.email; 

    switch (path) {
        case '/api/device/add':
            if (method === 'POST') return handleDeviceAdd(request, env, userEmail);
            break;
        case '/api/device/list': 
            if (method === 'GET') return handleDeviceList(env, userEmail);
            break;
        case '/api/device/delete': 
            if (method === 'DELETE') return handleDeviceDelete(request, env, userEmail);
            break;
        case '/api/schedule/set':
            if (method === 'POST') return handleSetSchedule(request, env, userEmail);
            break;
        case '/api/schedule/list':
            if (method === 'GET') return handleScheduleList(env, userEmail);
            break;
        case '/api/schedule/delete':
            if (method === 'DELETE') return handleScheduleDelete(request, env, userEmail);
            break;
        case '/api/schedule/toggle':
            if (method === 'POST') return handleScheduleToggle(request, env, userEmail);
            break;
        default:
            return new Response('Protected API Not Found', { status: 404 });
    }

    return new Response('Method Not Allowed', { status: 405 });
}




I've other file too but maybe not needed
